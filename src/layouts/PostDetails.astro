---
import { render, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import EditPost from "@/components/EditPost.astro";
import ShareLinks from "@/components/ShareLinks.astro";
import BackButton from "@/components/BackButton.astro";
import BackToTopButton from "@/components/BackToTopButton.astro";
import { getPath } from "@/utils/getPath";
import { slugifyStr } from "@/utils/slugify";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import { SITE } from "@/config";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage: initOgImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  timezone,
  tags,
  hideEditPost,
} = post.data;

const { Content } = await render(post);

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  ogImageUrl = initOgImage; // Remote OG image (absolute URL)
} else if (initOgImage?.src) {
  ogImageUrl = initOgImage.src; // Local asset
}

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  ogImageUrl = `${getPath(post.id, post.filePath)}/index.png`;
}

// Resolve OG image URL (or fallback to SITE.ogImage / default `og.png`)
const ogImage = ogImageUrl
  ? new URL(ogImageUrl, Astro.url.origin).href
  : undefined;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
};

/* ========== Prev/Next Posts ========== */

const allPosts = posts.map(({ data: { title }, id, filePath }) => ({
  id,
  title,
  filePath,
}));

const currentPostIndex = allPosts.findIndex(a => a.id === post.id);

const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;
---

<Layout {...layoutProps}>
  <Header />
  <BackButton />
  <main
    id="main-content"
    class:list={[
      "mx-auto w-full max-w-app px-4 pb-12",
      { "mt-8": !SITE.showBackButton },
    ]}
    data-pagefind-body
  >
    <h1
      transition:name={slugifyStr(title)}
      class="inline-block text-2xl font-bold text-accent sm:text-3xl"
    >
      {title}
    </h1>
    <div class="my-2 flex items-center gap-2">
      <Datetime {pubDatetime} {modDatetime} {timezone} size="lg" />
      <span
        aria-hidden="true"
        class:list={[
          "max-sm:hidden",
          { hidden: !SITE.editPost.enabled || hideEditPost },
        ]}>|</span
      >
      <EditPost {hideEditPost} {post} class="max-sm:hidden" />
    </div>
    <div class="post-content-wrapper">
      <article
        id="article"
        class="app-prose mx-auto mt-0 prose-pre:bg-(--shiki-light-bg) dark:prose-pre:bg-(--shiki-dark-bg)"
      >
        <Content />
      </article>
      
      <div class="right-sidebar">
        <h2>目录</h2>
        <div id="toc-content"></div>
      </div>
    </div>

    <hr class="my-8 border-dashed" />

    <EditPost class="sm:hidden" {hideEditPost} {post} />

    <ul class="mt-4 mb-8 sm:my-8">
      {tags.map((tag: string) => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
    </ul>

    <BackToTopButton />

    <ShareLinks />

    <hr class="my-6 border-dashed" />

    <!-- Previous/Next Post Buttons -->
    <div data-pagefind-ignore class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      {
        prevPost && (
          <a
            href={getPath(prevPost.id, prevPost.filePath)}
            class="flex w-full gap-1 hover:opacity-75"
          >
            <IconChevronLeft class="inline-block flex-none rtl:rotate-180" />
            <div>
              <span>Previous Post</span>
              <div class="text-sm text-accent/85">{prevPost.title}</div>
            </div>
          </a>
        )
      }
      {
        nextPost && (
          <a
            href={getPath(nextPost.id, nextPost.filePath)}
            class="flex w-full justify-end gap-1 text-end hover:opacity-75 sm:col-start-2"
          >
            <div>
              <span>Next Post</span>
              <div class="text-sm text-accent/85">{nextPost.title}</div>
            </div>
            <IconChevronRight class="inline-block flex-none rtl:rotate-180" />
          </a>
        )
      }
    </div>
  </main>
  <Footer />
</Layout>

<script is:inline data-astro-rerun>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-background";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-accent";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    document.addEventListener("scroll", () => {
      const winScroll =
        document.body.scrollTop || document.documentElement.scrollTop;
      const height =
        document.documentElement.scrollHeight -
        document.documentElement.clientHeight;
      const scrolled = (winScroll / height) * 100;
      if (document) {
        const myBar = document.getElementById("myBar");
        if (myBar) {
          myBar.style.width = scrolled + "%";
        }
      }
    });
  }
  updateScrollProgress();

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    const headings = Array.from(
      document.querySelectorAll("h2, h3, h4, h5, h6")
    );
    for (const heading of headings) {
      heading.classList.add("group");
      const link = document.createElement("a");
      link.className =
        "heading-link ms-2 no-underline opacity-75 md:opacity-0 md:group-hover:opacity-100 md:focus:opacity-100";
      link.href = "#" + heading.id;

      const span = document.createElement("span");
      span.ariaHidden = "true";
      span.innerText = "#";
      link.appendChild(span);
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    const copyButtonLabel = "Copy";
    const codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (const codeBlock of codeBlocks) {
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      // Check if --file-name-offset custom property exists
      const computedStyle = getComputedStyle(codeBlock);
      const hasFileNameOffset =
        computedStyle.getPropertyValue("--file-name-offset").trim() !== "";

      // Determine the top positioning class
      const topClass = hasFileNameOffset
        ? "top-(--file-name-offset)"
        : "-top-3";

      const copyButton = document.createElement("button");
      copyButton.className = `copy-code absolute end-3 ${topClass} rounded bg-muted border border-muted px-2 py-1 text-xs leading-4 text-foreground font-medium`;
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      const code = block.querySelector("code");
      const text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /* Go to page start after page swap */
  document.addEventListener("astro:after-swap", () =>
    window.scrollTo({ left: 0, top: 0, behavior: "instant" })
  );
  
  // 提取文章中的目录并显示在右侧边栏，支持折叠功能
  function extractTableOfContents() {
    const article = document.getElementById("article");
    const tocContent = document.getElementById("toc-content");
    
    if (!article || !tocContent) return;
    
    // 清空目录内容，避免重复
    tocContent.innerHTML = "";
    
    // 查找文章中的目录
    const tocDetails = Array.from(article.querySelectorAll("details")).find(
      details => {
        const summary = details.querySelector("summary");
        return summary && summary.textContent?.trim() === "Table of contents";
      }
    );
    
    // 先隐藏所有可能的目录元素
    Array.from(article.querySelectorAll("details")).forEach(details => {
      const summary = details.querySelector("summary");
      if (summary && summary.textContent?.trim() === "Table of contents") {
        details.style.display = "none";
      }
    });
    
    if (tocDetails) {
      // 复制目录内容到右侧边栏
      const tocList = tocDetails.querySelector("ul");
      if (tocList) {
        // 处理目录内容，添加折叠功能
        createCollapsibleToc(tocList, tocContent);
      }
    } else {
      // 如果没有找到目录，则生成一个基于标题的目录
      const headings = Array.from(article.querySelectorAll("h2, h3, h4")).filter(
        heading => {
          const headingText = heading.textContent?.trim() || "";
          return headingText !== "Table of contents";
        }
      );
      
      if (headings.length > 0) {
        // 创建目录并添加折叠功能
        createTocFromHeadings(headings, tocContent);
      }
    }
  }
  
  // 从现有目录创建可折叠目录
  function createCollapsibleToc(tocList, tocContent) {
    // 复制目录内容
    const clonedList = tocList.cloneNode(true);
    
    // 移除所有 # 符号
    Array.from(clonedList.querySelectorAll("a")).forEach(link => {
      // 移除链接文本中的 # 符号
      if (link.textContent) {
        link.textContent = link.textContent.replace(/#/g, "").trim();
      }
    });
    
    // 处理目录项，添加折叠功能
    processListItems(clonedList);
    
    tocContent.appendChild(clonedList);
  }
  
  // 从标题创建可折叠目录
  function createTocFromHeadings(headings, tocContent) {
    const ul = document.createElement("ul");
    
    // 跟踪当前的标题级别和父元素
    let currentLevel = 2; // 从h2开始
    let currentParent = ul;
    let parentStack = [ul];
    
    headings.forEach(heading => {
      const headingLevel = parseInt(heading.tagName.charAt(1));
      const li = document.createElement("li");
      const a = document.createElement("a");
      
      // 创建锚点ID（如果没有）
      if (!heading.id) {
        heading.id = heading.textContent?.trim().toLowerCase().replace(/\s+/g, "-") || "";
      }
      
      a.href = `#${heading.id}`;
      
      // 移除标题文本中的 # 符号
      if (heading.textContent) {
        a.textContent = heading.textContent.replace(/#/g, "").trim();
      } else {
        a.textContent = "";
      }
      
      li.appendChild(a);
      
      // 处理嵌套
      if (headingLevel > currentLevel) {
        // 创建新的子列表
        const newUl = document.createElement("ul");
        
        // 添加折叠功能
        const lastLi = currentParent.lastElementChild;
        if (lastLi) {
          lastLi.classList.add("has-children");
          const toggleBtn = document.createElement("span");
          toggleBtn.className = "toggle-btn";
          toggleBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16"><path d="M12 16L6 10H18L12 16Z" fill="currentColor"/></svg>';
          lastLi.insertBefore(toggleBtn, lastLi.firstChild);
          
          lastLi.appendChild(newUl);
          
          // 添加点击事件
          toggleBtn.addEventListener("click", function(e) {
            e.preventDefault();
            e.stopPropagation();
            this.parentElement.classList.toggle("expanded");
          });
        }
        
        currentParent = newUl;
        parentStack.push(newUl);
        currentLevel = headingLevel;
      } else if (headingLevel < currentLevel) {
        // 回到上一级
        const steps = currentLevel - headingLevel;
        for (let i = 0; i < steps; i++) {
          parentStack.pop();
        }
        currentParent = parentStack[parentStack.length - 1];
        currentLevel = headingLevel;
      }
      
      currentParent.appendChild(li);
    });
    
    // 处理目录项，添加折叠功能
    processListItems(ul);
    
    tocContent.appendChild(ul);
  }
  
  // 处理目录项，添加折叠功能
  function processListItems(ul) {
    // 使用更高效的选择器直接找到有子目录的项
    const itemsWithChildren = ul.querySelectorAll("li:has(ul)");
    
    itemsWithChildren.forEach(item => {
      // 移除所有已存在的箭头和按钮，防止重叠
      const existingArrows = item.querySelectorAll(".toggle-btn");
      existingArrows.forEach(arrow => arrow.remove());
      
      // 有子目录的项添加可折叠功能
      item.classList.add("has-children");
      
      // 添加折叠按钮
      const toggleBtn = document.createElement("span");
      toggleBtn.className = "toggle-btn";
      // 使用箭头样式
      toggleBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16"><path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6-6-6z" fill="currentColor"/></svg>';
      
      // 添加点击事件
      toggleBtn.addEventListener("click", function(e) {
        e.preventDefault();
        e.stopPropagation();
        this.parentElement.classList.toggle("expanded");
      });
      
      // 添加按钮到最前面
      item.insertBefore(toggleBtn, item.firstChild);
    });
  }
  
  function setupScrollSpy() {
    const article = document.getElementById("article");
    const tocContent = document.getElementById("toc-content");
    
    if (!article || !tocContent) return;
    
    // 获取所有标题元素
    const headings = Array.from(article.querySelectorAll("h2, h3, h4")).filter(
      heading => {
        const headingText = heading.textContent?.trim() || "";
        return headingText !== "Table of contents";
      }
    );
    
    // 获取所有目录链接
    const tocLinks = Array.from(tocContent.querySelectorAll("a"));
    
    // 获取所有可折叠的目录项
    const collapsibleItems = Array.from(tocContent.querySelectorAll("li.has-children"));
    
    // 上一个活动的链接
    let activeLink = null;
    
    // 监听滚动事件
    function onScroll() {
      // 获取当前滚动位置
      const scrollPosition = window.scrollY + 100; // 添加偏移量，提前高亮
      
      // 找到当前可见的标题
      let currentHeading = null;
      
      for (const heading of headings) {
        if (heading.offsetTop <= scrollPosition) {
          currentHeading = heading;
        } else {
          break;
        }
      }
      
      // 如果找到当前标题，高亮对应的目录项
      if (currentHeading) {
        const headingId = currentHeading.id;
        
        // 移除之前的活动状态
        if (activeLink) {
          activeLink.classList.remove("active");
        }
        
        // 找到对应的目录链接
        const targetLink = tocLinks.find(link => link.getAttribute("href") === `#${headingId}`);
        
        if (targetLink) {
          // 添加活动状态
          targetLink.classList.add("active");
          activeLink = targetLink;
          
          // 先折叠所有目录项
          collapsibleItems.forEach(item => {
            item.classList.remove("expanded");
          });
          
          // 展开当前目录项的父级目录
          let parent = targetLink.parentElement;
          while (parent && parent !== tocContent) {
            if (parent.classList.contains("has-children")) {
              parent.classList.add("expanded");
            }
            parent = parent.parentElement;
          }
        }
      }
    }
    
    // 节流函数，避免频繁触发
    let ticking = false;
    window.addEventListener("scroll", () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          onScroll();
          ticking = false;
        });
        ticking = true;
      }
    });
    
    // 初始化时执行一次
    onScroll();
  }
  
  // 在每次页面加载完成后提取目录并设置滚动监听
  document.addEventListener("astro:page-load", () => {
    extractTableOfContents();
    setupScrollSpy();
  });
  
  // 确保在页面切换时也能正确处理目录
  document.addEventListener("astro:after-swap", () => {
    extractTableOfContents();
    setupScrollSpy();
  });
</script>
